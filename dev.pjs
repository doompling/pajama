#def_e print_class(sock SockaddrIn)
def_e print_int(int Int)
def_e print_bytes(byte_ptr BytePtr, int Int)

def_e perror(byte_ptr BytePtr)
def_e exit(code Int32)

def_e pj_malloc_struct(name Str) -> BytePtr
def_e pj_listen(pj_tcp_server TcpServer)
def_e pj_poll(pj_tcp_server TcpServer)
def_e pj_check_events(pj_tcp_server TcpServer, pj_tcp_events TcpEvents)
def_e pj_tcp_connection_write(pj_tcp_connection TcpConnection, str Str)

class Str
   @buffer     BytePtr
   @length     Int
   @max_length Int
end

def base_print(str Str)
   print_bytes(str.buffer, str.length)
end

def base_print_error(str Str)
   perror(str.buffer)
end

class Function
   def fn_ref
   end
end

class TcpEvents
   @tcp_writable_fn      FnRef
   @tcp_data_received_fn FnRef
end

class TcpListener
end

class IoPoll
end

class IoEvents
end

class IoConnections
end

class TcpServer
   @host         Str
   @port         Str
   @tcp_listener TcpListener
   @poll         IoPoll
   @events       IoEvents
   @connections  IoConnections
   @conn_id      Int

   def listen
      pj_listen(self)
   end

   def poll
      pj_poll(self)
   end

   def check_events(tcp_events TcpEvents)
   # def check_events(writable_fn FnRef)
      pj_check_events(self, tcp_events)
      # pj_check_events(self, writable_fn)
   end
end

class TcpConnection
   def write(str Str)
      pj_tcp_connection_write(self, str)
   end
end

def tcp_writable(conn TcpConnection)
   base_print("tcp_writable called")
   conn.write("HELLOOOOOO")
end

def tcp_data_received(conn TcpConnection, received_data Str)
   base_print("tcp_data_received called")
   base_print(received_data)
end

def _mlir_ciface_main
   server = TcpServer.new(
      "127.0.0.1",
      "7878",
      pj_malloc_struct("TcpListener"), # todo: TcpListener.alloca()
      pj_malloc_struct("IoPoll"),
      pj_malloc_struct("IoEvents"),
      pj_malloc_struct("IoConnections"),
      0
   )
   server.listen()

   base_print("Pajama: Server listening on 127.0.0.1:7878")

  event_handlers = TcpEvents.new(
     tcp_writable.fn_ref(),
     tcp_data_received.fn_ref()
  )

# #   loop {
      server.poll()
      server.check_events(event_handlers)
      # server.check_events(
      #    tcp_writable.fn_ref(),
      #    tcp_data_received.fn_ref()
      # )
# #   }

   loop {}
end
